/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package View;

/**
 *
 * @author DELL
 */
import Controller.BCrypt;
//import controller.SearchAccount;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.plaf.basic.BasicInternalFrameUI;
import javax.swing.table.DefaultTableModel;
import Model.Accounts;
import DAO.AccountDAO;
import java.awt.Desktop;
import java.io.BufferedInputStream;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.UIManager;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import javax.swing.JFrame;
import Model.NhaCungCap;
//import org.apache.poi.ss.usermodel.Cell;
//import org.apache.poi.ss.usermodel.Row;
//import org.apache.poi.ss.usermodel.Sheet;
//import org.apache.poi.ss.usermodel.Workbook;
//import org.apache.poi.xssf.usermodel.XSSFRow;
//import org.apache.poi.xssf.usermodel.XSSFSheet;
//import org.apache.poi.xssf.usermodel.XSSFWorkbook;

public class AccountForm extends javax.swing.JInternalFrame {

    private DefaultTableModel tblModel;
    private ArrayList<Accounts> accounts = AccountDAO.getInstance().selectAll();
    public AccountForm() {
        initComponents();
        UIManager.put("Table.showVerticalLines", true);
        BasicInternalFrameUI ui = (BasicInternalFrameUI) this.getUI();
        ui.setNorthPane(null);
        tblAccount1.setDefaultEditor(Object.class, null);
        initTable();
        loadDataToTable(accounts);
    }   

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jInternalFrame1 = new javax.swing.JInternalFrame();
        jPanel2 = new javax.swing.JPanel();
        jToolBar1 = new javax.swing.JToolBar();
        btnAdd = new javax.swing.JButton();
        btnDeleteAccount = new javax.swing.JButton();
        btnEditAccount = new javax.swing.JButton();
        btnEditAccount1 = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JToolBar.Separator();
        exportExcel = new javax.swing.JButton();
        importExcel = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        cbxLuachon = new javax.swing.JComboBox<>();
        txtSearch = new javax.swing.JTextField();
        btnreset = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblAccount = new javax.swing.JTable();
        jPanel4 = new javax.swing.JPanel();
        jToolBar2 = new javax.swing.JToolBar();
        btnAdd1 = new javax.swing.JButton();
        btnDeleteAccount1 = new javax.swing.JButton();
        btnEditAccount2 = new javax.swing.JButton();
        btnEditAccount3 = new javax.swing.JButton();
        jSeparator2 = new javax.swing.JToolBar.Separator();
        exportExcel1 = new javax.swing.JButton();
        importExcel1 = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        cbxLuachon1 = new javax.swing.JComboBox<>();
        txtSearch1 = new javax.swing.JTextField();
        btnreset1 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblAccount1 = new javax.swing.JTable();

        setBackground(new java.awt.Color(255, 255, 255));
        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(68, 24));
        setPreferredSize(new java.awt.Dimension(1180, 774));

        jInternalFrame1.setBackground(new java.awt.Color(255, 255, 255));
        jInternalFrame1.setBorder(null);
        jInternalFrame1.setClosable(true);
        jInternalFrame1.getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jToolBar1.setBackground(new java.awt.Color(255, 255, 255));
        jToolBar1.setBorder(javax.swing.BorderFactory.createTitledBorder("Chức năng"));
        jToolBar1.setRollover(true);

        btnAdd.setText("Thêm");
        btnAdd.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnAdd.setFocusable(false);
        btnAdd.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnAdd.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });
        jToolBar1.add(btnAdd);

        btnDeleteAccount.setText("Xoá");
        btnDeleteAccount.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnDeleteAccount.setFocusable(false);
        btnDeleteAccount.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnDeleteAccount.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnDeleteAccount.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteAccountActionPerformed(evt);
            }
        });
        jToolBar1.add(btnDeleteAccount);

        btnEditAccount.setText("Sửa");
        btnEditAccount.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnEditAccount.setFocusable(false);
        btnEditAccount.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnEditAccount.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnEditAccount.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditAccountActionPerformed(evt);
            }
        });
        jToolBar1.add(btnEditAccount);

        btnEditAccount1.setText("Đặt lại");
        btnEditAccount1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnEditAccount1.setFocusable(false);
        btnEditAccount1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnEditAccount1.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnEditAccount1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditAccount1ActionPerformed(evt);
            }
        });
        jToolBar1.add(btnEditAccount1);
        jToolBar1.add(jSeparator1);

        exportExcel.setText("Xuất Excel");
        exportExcel.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        exportExcel.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        exportExcel.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        exportExcel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportExcelActionPerformed(evt);
            }
        });
        jToolBar1.add(exportExcel);

        importExcel.setText("Nhập Excel");
        importExcel.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        importExcel.setFocusable(false);
        importExcel.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        importExcel.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        importExcel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                importExcelActionPerformed(evt);
            }
        });
        jToolBar1.add(importExcel);

        jPanel2.add(jToolBar1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 400, 90));

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));
        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Tìm kiếm"));
        jPanel3.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        cbxLuachon.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Tất cả", "Tên tài khoản", "Tên đăng nhập", "Vai trò" }));
        jPanel3.add(cbxLuachon, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 30, 130, 40));

        txtSearch.addInputMethodListener(new java.awt.event.InputMethodListener() {
            public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
            }
            public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
                txtSearchInputMethodTextChanged(evt);
            }
        });
        txtSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSearchActionPerformed(evt);
            }
        });
        txtSearch.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                txtSearchPropertyChange(evt);
            }
        });
        txtSearch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtSearchKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtSearchKeyReleased(evt);
            }
        });
        jPanel3.add(txtSearch, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 30, 320, 40));

        btnreset.setText("Làm mới");
        btnreset.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnreset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnresetActionPerformed(evt);
            }
        });
        jPanel3.add(btnreset, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 30, 170, 40));

        jPanel2.add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 10, 720, 90));

        jScrollPane1.setBorder(null);

        tblAccount.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Tên tài khoản", "Tên đăng nhập", "Vai trò", "Trạng thái"
            }
        ));
        tblAccount.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        tblAccount.setGridColor(new java.awt.Color(204, 204, 204));
        tblAccount.setShowGrid(true);
        jScrollPane1.setViewportView(tblAccount);

        jPanel2.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 120, 1160, 620));

        jInternalFrame1.getContentPane().add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1180, 750));

        jPanel4.setBackground(new java.awt.Color(255, 255, 255));
        jPanel4.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jToolBar2.setBackground(new java.awt.Color(255, 255, 255));
        jToolBar2.setBorder(javax.swing.BorderFactory.createTitledBorder("Chức năng"));
        jToolBar2.setRollover(true);

        btnAdd1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icon/btnthem2 (1).jpg"))); // NOI18N
        btnAdd1.setText("Thêm");
        btnAdd1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnAdd1.setFocusable(false);
        btnAdd1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnAdd1.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnAdd1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAdd1ActionPerformed(evt);
            }
        });
        jToolBar2.add(btnAdd1);

        btnDeleteAccount1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icon/deletebutton 40px.png"))); // NOI18N
        btnDeleteAccount1.setText("Xoá");
        btnDeleteAccount1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnDeleteAccount1.setFocusable(false);
        btnDeleteAccount1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnDeleteAccount1.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnDeleteAccount1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteAccount1ActionPerformed(evt);
            }
        });
        jToolBar2.add(btnDeleteAccount1);

        btnEditAccount2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icon/Update 40px.png"))); // NOI18N
        btnEditAccount2.setText("Sửa");
        btnEditAccount2.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnEditAccount2.setFocusable(false);
        btnEditAccount2.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnEditAccount2.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnEditAccount2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditAccount2ActionPerformed(evt);
            }
        });
        jToolBar2.add(btnEditAccount2);

        btnEditAccount3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icon/comeback 40px.png"))); // NOI18N
        btnEditAccount3.setText("Đặt lại");
        btnEditAccount3.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnEditAccount3.setFocusable(false);
        btnEditAccount3.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnEditAccount3.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnEditAccount3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditAccount3ActionPerformed(evt);
            }
        });
        jToolBar2.add(btnEditAccount3);
        jToolBar2.add(jSeparator2);

        exportExcel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icon/printexel 40px.png"))); // NOI18N
        exportExcel1.setText("Xuất Excel");
        exportExcel1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        exportExcel1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        exportExcel1.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        exportExcel1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportExcel1ActionPerformed(evt);
            }
        });
        jToolBar2.add(exportExcel1);

        importExcel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icon/putinexcel 40px.png"))); // NOI18N
        importExcel1.setText("Nhập Excel");
        importExcel1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        importExcel1.setFocusable(false);
        importExcel1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        importExcel1.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        importExcel1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                importExcel1ActionPerformed(evt);
            }
        });
        jToolBar2.add(importExcel1);

        jPanel4.add(jToolBar2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 400, 90));

        jPanel5.setBackground(new java.awt.Color(255, 255, 255));
        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder("Tìm kiếm"));
        jPanel5.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        cbxLuachon1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Tất cả", "Tên tài khoản", "Tên đăng nhập", "Vai trò" }));
        jPanel5.add(cbxLuachon1, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 30, 130, 40));

        txtSearch1.addInputMethodListener(new java.awt.event.InputMethodListener() {
            public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
            }
            public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
                txtSearch1InputMethodTextChanged(evt);
            }
        });
        txtSearch1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSearch1ActionPerformed(evt);
            }
        });
        txtSearch1.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                txtSearch1PropertyChange(evt);
            }
        });
        txtSearch1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtSearch1KeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtSearch1KeyReleased(evt);
            }
        });
        jPanel5.add(txtSearch1, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 30, 320, 40));

        btnreset1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icon/Refresh 25px.png"))); // NOI18N
        btnreset1.setText("Làm mới");
        btnreset1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnreset1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnreset1ActionPerformed(evt);
            }
        });
        jPanel5.add(btnreset1, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 30, 170, 40));

        jPanel4.add(jPanel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 10, 720, 90));

        jScrollPane2.setBorder(null);

        tblAccount1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Tên tài khoản", "Tên đăng nhập", "Vai trò", "Trạng thái"
            }
        ));
        tblAccount1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        tblAccount1.setGridColor(new java.awt.Color(204, 204, 204));
        tblAccount1.setShowGrid(true);
        jScrollPane2.setViewportView(tblAccount1);

        jPanel4.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 150, 1110, 620));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1186, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(0, 593, Short.MAX_VALUE)
                    .addComponent(jInternalFrame1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 593, Short.MAX_VALUE)))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, 1174, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 774, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(0, 387, Short.MAX_VALUE)
                    .addComponent(jInternalFrame1, javax.swing.GroupLayout.PREFERRED_SIZE, 770, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 387, Short.MAX_VALUE)))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, 744, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap()))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    public final void initTable() {
        tblModel = new DefaultTableModel();
        String[] headerTbl = new String[]{"Tên tài khoản", "Tên đăng nhập", "Email", "Vai trò", "Trạng thái"};
        tblModel.setColumnIdentifiers(headerTbl);
        tblAccount1.setModel(tblModel);
    }
    public void loadDataToTable(ArrayList<Accounts> acc) {
        try {
            tblModel.setRowCount(0);
            for (Accounts i : acc) {
                tblModel.addRow(new Object[]{
                    i.getFullName(), i.getUser(), i.getEmail(), i.getRole(), i.getStatus() == 0 ? "Đã khóa" : "Hoạt động"
                });
            }
        } catch (Exception e) {
        }
    } 
     public Accounts getAccountSelect() {
        int i_row = tblAccount1.getSelectedRow();
        Accounts acc = AccountDAO.getInstance().selectById(tblAccount.getValueAt(i_row, 1).toString());
        return acc;
    }
   
    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed


    }//GEN-LAST:event_btnAddActionPerformed

    private void btnDeleteAccountActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteAccountActionPerformed
//        // TODO add your handling code here:
//        if (tblAccount.getSelectedRow() == -1) {
//            JOptionPane.showMessageDialog(this, "Vui lòng chọn tài khoản cần xoá !");
//        } else {
//            Account select = getAccountSelect();
//            if (select.getRole().equals("Admin")) {
//                JOptionPane.showMessageDialog(this, "Không thể xóa tài khoản admin !");
//            } else {
//                int checkVl = JOptionPane.showConfirmDialog(this, "Bạn có chắc chắn muốn xóa tài khoản này ?", "Xác nhận xóa tài khoản", JOptionPane.YES_NO_OPTION);
//                if (checkVl == JOptionPane.YES_OPTION) {
//                    try {
//                        AccountDAO.getInstance().delete(select);
//                        JOptionPane.showMessageDialog(this, "Xoá thành công tài khoản !");
//                        loadDataToTable(AccountDAO.getInstance().selectAll());
//                    } catch (Exception e) {
//                        JOptionPane.showMessageDialog(this, "Xoá thất bại !");
//                    }
//                }
//            }
//        }
    }//GEN-LAST:event_btnDeleteAccountActionPerformed

    private void btnEditAccountActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditAccountActionPerformed
//        // TODO add your handling code here:
//        if (tblAccount.getSelectedRow() == -1) {
//            JOptionPane.showMessageDialog(this, "Vui lòng chọn tài khoản cần chỉnh sửa !");
//        } else {
//            if (getAccountSelect().getRole().equals("Admin")) {
//                JOptionPane.showMessageDialog(this, "Không thể sửa tài khoản admin tại đây !", "Cảnh báo", JOptionPane.WARNING_MESSAGE);
//            } else {
//                UpdateAccount u = new UpdateAccount(this, (JFrame) javax.swing.SwingUtilities.getWindowAncestor(this), rootPaneCheckingEnabled);
//                u.setVisible(true);
//            }
//        }
    }//GEN-LAST:event_btnEditAccountActionPerformed

    private void btnEditAccount1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditAccount1ActionPerformed
//        // TODO add your handling code here:
//        if (tblAccount.getSelectedRow() == -1) {
//            JOptionPane.showMessageDialog(this, "Vui lòng chọn tài khoản cần đặt lại mật khẩu !");
//        } else {
//            int check = JOptionPane.showConfirmDialog(this, "Bạn có muổn reset tài khoản này ?", "Reset", JOptionPane.YES_NO_OPTION);
//            if (check == JOptionPane.YES_OPTION) {
//                String textct = JOptionPane.showInputDialog(this, "Nhập mật khẩu bạn muốn thay đổi: ");
//                if (textct.equals("")) {
//                    JOptionPane.showMessageDialog(this, "Không được để trống !");
//                } else {
//                    int row = tblAccount.getSelectedRow();
//                    String userName = tblAccount.getValueAt(row, 1).toString();
//                    Account accReset = AccountDAO.getInstance().selectById(userName);
//                    accReset.setPassword(BCrypt.hashpw(textct, BCrypt.gensalt(12)));
//                    try {
//                        AccountDAO.getInstance().update(accReset);
//                        JOptionPane.showMessageDialog(this, "Thay đổi thành công !");
//                    } catch (Exception e) {
//                        JOptionPane.showMessageDialog(this, "Thay đổi không thành công !");
//                    }
//                    accounts = AccountDAO.getInstance().selectAll();
//                    loadDataToTable(accounts);
//                }
//            }
//        }
    }//GEN-LAST:event_btnEditAccount1ActionPerformed

    private void exportExcelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportExcelActionPerformed
//        // TODO add your handling code here:
//        try {
//            JFileChooser jFileChooser = new JFileChooser();
//            jFileChooser.showSaveDialog(this);
//            File saveFile = jFileChooser.getSelectedFile();
//            if (saveFile != null) {
//                saveFile = new File(saveFile.toString() + ".xlsx");
//                Workbook wb = new XSSFWorkbook();
//                Sheet sheet = wb.createSheet("Account");
//
//                Row rowCol = sheet.createRow(0);
//                for (int i = 0; i < tblAccount.getColumnCount(); i++) {
//                    Cell cell = rowCol.createCell(i);
//                    cell.setCellValue(tblAccount.getColumnName(i));
//                }
//                for (int j = 0; j < tblAccount.getRowCount(); j++) {
//                    Row row = sheet.createRow(j + 1);
//                    for (int k = 0; k < tblAccount.getColumnCount(); k++) {
//                        Cell cell = row.createCell(k);
//                        if (tblAccount.getValueAt(j, k) != null) {
//                            cell.setCellValue(tblAccount.getValueAt(j, k).toString());
//                        }
//                    }
//                }
//                FileOutputStream out = new FileOutputStream(new File(saveFile.toString()));
//                wb.write(out);
//                wb.close();
//                out.close();
//                openFile(saveFile.toString());
//            }
//        } catch (Exception e) {
//            e.printStackTrace();
//        }
    }//GEN-LAST:event_exportExcelActionPerformed

    private void importExcelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_importExcelActionPerformed
//        // TODO add your handling code here:
//        File excelFile;
//        FileInputStream excelFIS = null;
//        BufferedInputStream excelBIS = null;
//        XSSFWorkbook excelJTableImport = null;
//        ArrayList<Account> listAccExcel = new ArrayList<Account>();
//        JFileChooser jf = new JFileChooser();
//        int result = jf.showOpenDialog(null);
//        jf.setDialogTitle("Open file");
//        Workbook workbook = null;
//        if (result == JFileChooser.APPROVE_OPTION) {
//            try {
//                excelFile = jf.getSelectedFile();
//                excelFIS = new FileInputStream(excelFile);
//                excelBIS = new BufferedInputStream(excelFIS);
//
//                excelJTableImport = new XSSFWorkbook(excelBIS);
//                XSSFSheet excelSheet = excelJTableImport.getSheetAt(0);
//                System.out.println("Excel:");
//                for (int row = 1; row < excelSheet.getLastRowNum(); row++) {
//                    XSSFRow excelRow = excelSheet.getRow(row);
//                    String user = excelRow.getCell(1).getStringCellValue();
//                    Account acc = AccountDAO.getInstance().selectById(user);
//                    listAccExcel.add(acc);
//                }
//                loadDataToTable(listAccExcel);
//            } catch (FileNotFoundException ex) {
//                Logger.getLogger(AccountForm.class.getName()).log(Level.SEVERE, null, ex);
//            } catch (IOException ex) {
//                Logger.getLogger(AccountForm.class.getName()).log(Level.SEVERE, null, ex);
//            }
//
//        }
    }//GEN-LAST:event_importExcelActionPerformed

    private void txtSearchInputMethodTextChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_txtSearchInputMethodTextChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_txtSearchInputMethodTextChanged

    private void txtSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSearchActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtSearchActionPerformed

    private void txtSearchPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_txtSearchPropertyChange
        // TODO add your handling code here:
    }//GEN-LAST:event_txtSearchPropertyChange

    private void txtSearchKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSearchKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtSearchKeyPressed

    private void txtSearchKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSearchKeyReleased
//        // TODO add your handling code here:
//        String luachon = (String) cbxLuachon.getSelectedItem();
//        String searchContent = txtSearch.getText();
//        ArrayList<Account> result = new ArrayList<>();
//        switch (luachon) {
//            case "Tất cả":
//            result = SearchAccount.getInstance().searchTatCaAcc(searchContent);
//            break;
//            case "Tên tài khoản":
//            result = SearchAccount.getInstance().searchFullName(searchContent);
//            break;
//            case "Tên đăng nhập":
//            result = SearchAccount.getInstance().searchUserName(searchContent);
//            break;
//            case "Vai trò":
//            result = SearchAccount.getInstance().searchRole(searchContent);
//            break;
//        }
//        loadDataToTable(result);
    }//GEN-LAST:event_txtSearchKeyReleased

    private void btnresetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnresetActionPerformed
//        // TODO add your handling code here:
//        loadDataToTable(accounts);
    }//GEN-LAST:event_btnresetActionPerformed

    private void btnAdd1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAdd1ActionPerformed

        AddAccount a;
        a = new AddAccount(this, (JFrame) javax.swing.SwingUtilities.getWindowAncestor(this), rootPaneCheckingEnabled);
        a.setVisible(true);

    }//GEN-LAST:event_btnAdd1ActionPerformed

    private void btnDeleteAccount1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteAccount1ActionPerformed
//        // TODO add your handling code here:
//        if (tblAccount.getSelectedRow() == -1) {
//            JOptionPane.showMessageDialog(this, "Vui lòng chọn tài khoản cần xoá !");
//        } else {
//            Account select = getAccountSelect();
//            if (select.getRole().equals("Admin")) {
//                JOptionPane.showMessageDialog(this, "Không thể xóa tài khoản admin !");
//            } else {
//                int checkVl = JOptionPane.showConfirmDialog(this, "Bạn có chắc chắn muốn xóa tài khoản này ?", "Xác nhận xóa tài khoản", JOptionPane.YES_NO_OPTION);
//                if (checkVl == JOptionPane.YES_OPTION) {
//                    try {
//                        AccountDAO.getInstance().delete(select);
//                        JOptionPane.showMessageDialog(this, "Xoá thành công tài khoản !");
//                        loadDataToTable(AccountDAO.getInstance().selectAll());
//                    } catch (Exception e) {
//                        JOptionPane.showMessageDialog(this, "Xoá thất bại !");
//                    }
//                }
//            }
//        }
    }//GEN-LAST:event_btnDeleteAccount1ActionPerformed

    private void btnEditAccount2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditAccount2ActionPerformed
//        // TODO add your handling code here:
//        if (tblAccount.getSelectedRow() == -1) {
//            JOptionPane.showMessageDialog(this, "Vui lòng chọn tài khoản cần chỉnh sửa !");
//        } else {
//            if (getAccountSelect().getRole().equals("Admin")) {
//                JOptionPane.showMessageDialog(this, "Không thể sửa tài khoản admin tại đây !", "Cảnh báo", JOptionPane.WARNING_MESSAGE);
//            } else {
//                UpdateAccount u = new UpdateAccount(this, (JFrame) javax.swing.SwingUtilities.getWindowAncestor(this), rootPaneCheckingEnabled);
//                u.setVisible(true);
//            }
//        }
    }//GEN-LAST:event_btnEditAccount2ActionPerformed

    private void btnEditAccount3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditAccount3ActionPerformed
//        // TODO add your handling code here:
//        if (tblAccount.getSelectedRow() == -1) {
//            JOptionPane.showMessageDialog(this, "Vui lòng chọn tài khoản cần đặt lại mật khẩu !");
//        } else {
//            int check = JOptionPane.showConfirmDialog(this, "Bạn có muổn reset tài khoản này ?", "Reset", JOptionPane.YES_NO_OPTION);
//            if (check == JOptionPane.YES_OPTION) {
//                String textct = JOptionPane.showInputDialog(this, "Nhập mật khẩu bạn muốn thay đổi: ");
//                if (textct.equals("")) {
//                    JOptionPane.showMessageDialog(this, "Không được để trống !");
//                } else {
//                    int row = tblAccount.getSelectedRow();
//                    String userName = tblAccount.getValueAt(row, 1).toString();
//                    Account accReset = AccountDAO.getInstance().selectById(userName);
//                    accReset.setPassword(BCrypt.hashpw(textct, BCrypt.gensalt(12)));
//                    try {
//                        AccountDAO.getInstance().update(accReset);
//                        JOptionPane.showMessageDialog(this, "Thay đổi thành công !");
//                    } catch (Exception e) {
//                        JOptionPane.showMessageDialog(this, "Thay đổi không thành công !");
//                    }
//                    accounts = AccountDAO.getInstance().selectAll();
//                    loadDataToTable(accounts);
//                }
//            }
//        }
    }//GEN-LAST:event_btnEditAccount3ActionPerformed

    private void exportExcel1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportExcel1ActionPerformed
//        // TODO add your handling code here:
//        try {
//            JFileChooser jFileChooser = new JFileChooser();
//            jFileChooser.showSaveDialog(this);
//            File saveFile = jFileChooser.getSelectedFile();
//            if (saveFile != null) {
//                saveFile = new File(saveFile.toString() + ".xlsx");
//                Workbook wb = new XSSFWorkbook();
//                Sheet sheet = wb.createSheet("Account");
//
//                Row rowCol = sheet.createRow(0);
//                for (int i = 0; i < tblAccount.getColumnCount(); i++) {
//                    Cell cell = rowCol.createCell(i);
//                    cell.setCellValue(tblAccount.getColumnName(i));
//                }
//                for (int j = 0; j < tblAccount.getRowCount(); j++) {
//                    Row row = sheet.createRow(j + 1);
//                    for (int k = 0; k < tblAccount.getColumnCount(); k++) {
//                        Cell cell = row.createCell(k);
//                        if (tblAccount.getValueAt(j, k) != null) {
//                            cell.setCellValue(tblAccount.getValueAt(j, k).toString());
//                        }
//                    }
//                }
//                FileOutputStream out = new FileOutputStream(new File(saveFile.toString()));
//                wb.write(out);
//                wb.close();
//                out.close();
//                openFile(saveFile.toString());
//            }
//        } catch (Exception e) {
//            e.printStackTrace();
//        }
    }//GEN-LAST:event_exportExcel1ActionPerformed

    private void importExcel1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_importExcel1ActionPerformed
//        // TODO add your handling code here:
//        File excelFile;
//        FileInputStream excelFIS = null;
//        BufferedInputStream excelBIS = null;
//        XSSFWorkbook excelJTableImport = null;
//        ArrayList<Account> listAccExcel = new ArrayList<Account>();
//        JFileChooser jf = new JFileChooser();
//        int result = jf.showOpenDialog(null);
//        jf.setDialogTitle("Open file");
//        Workbook workbook = null;
//        if (result == JFileChooser.APPROVE_OPTION) {
//            try {
//                excelFile = jf.getSelectedFile();
//                excelFIS = new FileInputStream(excelFile);
//                excelBIS = new BufferedInputStream(excelFIS);
//
//                excelJTableImport = new XSSFWorkbook(excelBIS);
//                XSSFSheet excelSheet = excelJTableImport.getSheetAt(0);
//                System.out.println("Excel:");
//                for (int row = 1; row < excelSheet.getLastRowNum(); row++) {
//                    XSSFRow excelRow = excelSheet.getRow(row);
//                    String user = excelRow.getCell(1).getStringCellValue();
//                    Account acc = AccountDAO.getInstance().selectById(user);
//                    listAccExcel.add(acc);
//                }
//                loadDataToTable(listAccExcel);
//            } catch (FileNotFoundException ex) {
//                Logger.getLogger(AccountForm.class.getName()).log(Level.SEVERE, null, ex);
//            } catch (IOException ex) {
//                Logger.getLogger(AccountForm.class.getName()).log(Level.SEVERE, null, ex);
//            }
//
//        }
    }//GEN-LAST:event_importExcel1ActionPerformed

    private void txtSearch1InputMethodTextChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_txtSearch1InputMethodTextChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_txtSearch1InputMethodTextChanged

    private void txtSearch1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSearch1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtSearch1ActionPerformed

    private void txtSearch1PropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_txtSearch1PropertyChange
        // TODO add your handling code here:
    }//GEN-LAST:event_txtSearch1PropertyChange

    private void txtSearch1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSearch1KeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtSearch1KeyPressed

    private void txtSearch1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSearch1KeyReleased
//        // TODO add your handling code here:
//        String luachon = (String) cbxLuachon.getSelectedItem();
//        String searchContent = txtSearch.getText();
//        ArrayList<Account> result = new ArrayList<>();
//        switch (luachon) {
//            case "Tất cả":
//            result = SearchAccount.getInstance().searchTatCaAcc(searchContent);
//            break;
//            case "Tên tài khoản":
//            result = SearchAccount.getInstance().searchFullName(searchContent);
//            break;
//            case "Tên đăng nhập":
//            result = SearchAccount.getInstance().searchUserName(searchContent);
//            break;
//            case "Vai trò":
//            result = SearchAccount.getInstance().searchRole(searchContent);
//            break;
//        }
//        loadDataToTable(result);
    }//GEN-LAST:event_txtSearch1KeyReleased

    private void btnreset1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnreset1ActionPerformed
//        // TODO add your handling code here:
//        loadDataToTable(accounts);
    }//GEN-LAST:event_btnreset1ActionPerformed
    public void openFile(String file) {
        try {
            File path = new File(file);
            Desktop.getDesktop().open(path);
        } catch (IOException e) {
            System.out.println(e);
        }
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AccountForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AccountForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AccountForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AccountForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AccountForm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnAdd1;
    private javax.swing.JButton btnDeleteAccount;
    private javax.swing.JButton btnDeleteAccount1;
    private javax.swing.JButton btnEditAccount;
    private javax.swing.JButton btnEditAccount1;
    private javax.swing.JButton btnEditAccount2;
    private javax.swing.JButton btnEditAccount3;
    private javax.swing.JButton btnreset;
    private javax.swing.JButton btnreset1;
    private javax.swing.JComboBox<String> cbxLuachon;
    private javax.swing.JComboBox<String> cbxLuachon1;
    private javax.swing.JButton exportExcel;
    private javax.swing.JButton exportExcel1;
    private javax.swing.JButton importExcel;
    private javax.swing.JButton importExcel1;
    private javax.swing.JInternalFrame jInternalFrame1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JToolBar.Separator jSeparator1;
    private javax.swing.JToolBar.Separator jSeparator2;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JToolBar jToolBar2;
    public javax.swing.JTable tblAccount;
    public javax.swing.JTable tblAccount1;
    private javax.swing.JTextField txtSearch;
    private javax.swing.JTextField txtSearch1;
    // End of variables declaration//GEN-END:variables
}
